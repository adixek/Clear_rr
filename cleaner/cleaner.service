#!/system/bin/sh

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
busybox_path="/data/adb/magisk/busybox"
if ! command -v "${busybox_path}" >/dev/null 2>&1; then
  busybox_path="/data/adb/ksu/bin/busybox"
fi
cleaner_run_path="/data/adb/cleaner/run"
log_cleaner="${cleaner_run_path}/cleaner.log"
cleaner_pid="${cleaner_run_path}/cache.pid"
current_time=$(date +"%I:%M %P")

PROPFILE="/data/adb/modules/cache_cleaner/module.prop"

# “At minute 0 past every 6th hour.”
schedule_cleaner="0 */2 * * *"

# Define the log function
log() {
  # Check the log level
  if [ "$1" = "info" ]; then
    if [ -t 1 ]; then
      echo -e "\033[1;33m${current_time} [info]: $2\033[0m"
    fi
  else
    if [ -t 1 ]; then
      echo -e "\033[1;30m${current_time} [$1]: $2\033[0m"
    fi
  fi
  # Append the log to a file specified by the log_cleaner variable
  echo "${current_time} [$1]: $2" >> "${log_cleaner}" 2>/dev/null
}

# Define the run_cleaner function
run_cleaner() {
  # Define an array of directories to clean
  dirs=(
    "/data/data/com.android.launcher3*/cache"
    "/data/data/com.android.launcher3*/code_cache"
  )

  # Loop through each directory and clear its contents
  for dir in "${dirs[@]}"
  do
    size=$(du -cs $dir | grep total | cut -f 1)
    total=$(( total + size ))
    log debug "$dir >>>>> ${size} Kb"
    find $dir/* -delete &>/dev/null
  done
  # Print a message to indicate that the cleaning is complete
  log info "Cache cleaning is complete."
}

run_otomatis() {
  echo $(date) > ${log_cleaner}

  total=$(du -cs /data/data/*/cache /data/data/*/code_cache /data/user_de/*/*/cache /data/user_de/*/*/code_cache /sdcard/Android/data/*/cache /data/system/dropbox | grep total | cut -f 1 | paste -sd+ | bc)

  # Total Cache
  if [ "${total}" -ge 1024 ]; then
      total_cache="$(expr ${total} / 1024) MB"
  else
      total_cache="${total} KB"
  fi

  # Escape special characters in the total_cache variable
  escaped_total_cache=$(printf '%s\n' "${total_cache}" | sed -e 's/[\/&]/\\&/g')

  log info "total Cache: ${total_cache}"

  size_cache=1024 # Set size limit for Cache (in KB)

  if [ "$total" -gt "$size_cache" ]; then
    log info "Cleaning apps cache..."
    run_cleaner # call the cleaner function
    log info "Done! The apps cache has been cleaned!"
    # Use the escaped variable in the sed command
    sed -Ei "s/^description=(\\[.*][[:space:]]*)?/description=[ $current_time | 🥰 Total cache: ${escaped_total_cache}, Done! The apps cache has been cleaned! ] /g" "$PROPFILE"
  else
    log info "skip cleaning! Cache size is not yet ${size_cache} KB"
    # Use the escaped variable in the sed command
    sed -Ei "s/^description=(\\[.*][[:space:]]*)?/description=[ $current_time | 😍 Total cache: ${escaped_total_cache}, Skip cleaning!! ] /g" "$PROPFILE"
  fi

  log info "Have you ever jumped over these bushes?"
}

run_crond() {
  # Setup crond
  if [ "$?" -eq 0 ]; then
    ulimit -SHn 1000000
    nohup "${busybox_path}" crond -c "${cleaner_run_path}" > /dev/null 2>&1 &
    PID=$!
    echo -n $PID > "${cleaner_pid}"
  fi

  # Run crontab
  "${busybox_path}" crontab -c "${cleaner_run_path}" -r
  touch "${cleaner_run_path}/root"
  chmod 0600 "${cleaner_run_path}/root"

  # Set schedule Cache cleaner & otomatis
  if echo "${schedule_cleaner} ${scripts_dir}/cleaner.service auto" >> "${cleaner_run_path}/root"; then
    log info "Schedule Cache Cleaner (${schedule_cleaner})"
  fi
}

display_pid() {
  local PID
  PID=$(ps -ef | grep "crond -c /data/adb/cleaner" | grep -v grep | "${busybox_path}" awk '{print $2}' | head -n 1)
  if [ -n "$PID" ]; then
    echo "$PID" > "${cleaner_pid}"
    log info "Cache Cleaner service is running (PID: $PID)"
  else
    log error "Cache Cleaner service is not running"
  fi
}

start_cleaner() {
  run_otomatis
  run_crond
  display_pid
}

stop_cleaner() {
  local PID
  PID=$(ps -ef | grep "crond -c /data/adb/cleaner/run" | grep -v grep | "${busybox_path}" awk '{ print $2 }')
  if [ -n "$PID" ]; then
    kill -15 "$PID"
    rm -f "${cleaner_pid}"
    log info "Cache Cleaner stopped (PID: $PID)"
  else
    log error "Cache Cleaner is not running"
  fi
}

case "$1" in
  start)
    stop_cleaner
    start_cleaner
    ;;
  stop)
    stop_cleaner
    ;;
  auto)
    run_otomatis
    ;;
  *)
    echo "$0:  usage: $0 {start|stop}"
    ;;
esac
