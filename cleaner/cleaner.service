#!/system/bin/sh

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
busybox_path="/data/adb/magisk/busybox"
cleaner_run_path="/data/adb/cleaner/run"
log_cleaner="${cleaner_run_path}/cleaner.log"
cleaner_pid="${cleaner_run_path}/cache.pid"

# “At minute 0 past every 6th hour.”
schedule_cleaner="0 */6 * * *"

# Define the log function
log() {
  # Get the current time in the format of [HH:MM +ZZZZ]
  now=$(date +"[%H:%M %z]")
  
  # Check the log level
  if [ "$1" = "info" ]; then
    # If the log level is 'info', print the message in yellow
    if [ -t 1 ]; then
      # If the output is a terminal, use ANSI escape codes to print in yellow
      echo -e "\033[1;33m${now} [info]: $2\033[0m"
    fi
  else
    # For any other log level, print the message in gray
    if [ -t 1 ]; then
      # If the output is a terminal, use ANSI escape codes to print in gray
      echo -e "\033[1;30m${now} [$1]: $2\033[0m"
    fi
  fi
  
  # Append the log to a file specified by the log_cleaner variable
  echo "${now} [$1]: $2" >> "${log_cleaner}" 2>/dev/null
}

# Define the run_cleaner function
run_cleaner() {
  # Define an array of directories to clean
  dirs=(
    "/data/data/*/cache/*"
    "/data/data/*/code_cache/*"
    "/data/user_de/*/*/cache/*"
    "/data/user_de/*/*/code_cache/*"
    "/sdcard/Android/data/*/cache/*"
    "/data/system/dropbox/*"
  )

  # Loop through each directory and clear its contents

  for dir in "${dirs[@]}"
  do
      size=$(du -cs $dir | grep total | cut -f 1)
      total=$(( total + size ))
      log debug "$dir >>>>> ${size} Kb"
      find $dir/* -delete &>/dev/null
  done
 
  # for dir in "${dirs[@]}"; do
    # find "${dir}" -delete &>/dev/null
  # done
  
  # Print a message to indicate that the cleaning is complete
  log info "Cache cleaning is complete."
}

run_otomatis() {
    echo $(date) > ${log_cleaner}
    
    total=$(du -cs /data/data/*/cache /data/data/*/code_cache /data/user_de/*/*/cache /data/user_de/*/*/code_cache /sdcard/Android/data/*/cache /data/system/dropbox | grep total | cut -f 1 | paste -sd+ | bc)
    log info "total Cache: ${total} Kb"

    size_cache=1024000 # Set size limit for Cache (in Kb)
    
    if [ "$total" -gt "$size_cache" ]; then
        log info "Cleaning apps cache..."
        run_cleaner # call the cleaner function
        log info "Done! The apps cache has been cleaned!"
    else
        log info "Skip! Cache size is not yet ${size_cache} Kb"
    fi
    
    log info "Have you ever jumped over these bushes?"
}

run_crond() {
  # Setup crond
  if [ "$?" -eq 0 ]; then
    ulimit -SHn 1000000
    nohup "${busybox_path}" crond -c "${cleaner_run_path}" > /dev/null 2>&1 &
    echo -n "$!" > "${cleaner_pid}"
  fi

  # Run crontab
  "${busybox_path}" crontab -c "${cleaner_run_path}" -r
  touch "${cleaner_run_path}/root"
  chmod 0600 "${cleaner_run_path}/root"

  # Set schedule Cache cleaner & otomatis
  if echo "${schedule_cleaner} ${scripts_dir}/cleaner.service auto" >> "${cleaner_run_path}/root"; then
    log info "Schedule Cache Cleaner (${schedule_cleaner})"
  fi
}

display_pid() {
  local pid
  pid=$(ps -ef | grep "crond -c /data/adb/cleaner" | grep -v grep | "${busybox_path}" awk '{print $2}' | head -n 1)
  if [ -n "$pid" ]; then
    echo "$pid" > "${cleaner_pid}"
    log info "Cache Cleaner service is running (PID: $pid)"
  else
    log error "Cache Cleaner service is not running"
  fi
}

start_cleaner() {
    run_otomatis
    run_crond
    display_pid
}

stop_cleaner() {
  local pid
  pid=$(ps -ef | grep "crond -c /data/adb/cleaner/run" | grep -v grep | "${busybox_path}" awk '{ print $2 }')
  if [ -n "$pid" ]; then
    kill "$pid"
    rm -f "${cleaner_pid}"
    log info "Cache Cleaner stopped (PID: $pid)"
  else
    log error "Cache Cleaner is not running"
  fi
}

case "$1" in
  start)
    stop_cleaner
    start_cleaner
    ;;
  stop)
    stop_cleaner
    ;;
  auto)
    run_otomatis
    ;;
  *)
    echo "$0:  usage: $0 {start|stop}"
    ;;
esac
